/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface KittyPartyYieldGeneratorAaveInterface extends utils.Interface {
  functions: {
    "AaveContract()": FunctionFragment;
    "AaveRewardContract()": FunctionFragment;
    "MAX()": FunctionFragment;
    "__KittyPartyYieldGeneratorAave_init(address)": FunctionFragment;
    "createLockedValue(bytes)": FunctionFragment;
    "kittyPartyYieldInfo(address)": FunctionFragment;
    "lockedAmount(address)": FunctionFragment;
    "lockedPool(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardTokenAddress()": FunctionFragment;
    "setAllowanceDeposit(address)": FunctionFragment;
    "setAllowanceWithdraw(address)": FunctionFragment;
    "setPartyInfo(address,address)": FunctionFragment;
    "setPlatformDepositContractAddress(address)": FunctionFragment;
    "setPlatformRewardContractAddress(address,address)": FunctionFragment;
    "setPlatformWithdrawContractAddress(address)": FunctionFragment;
    "totalLocked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "unwindLockedValue(bytes)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
    "yieldCurrent(address)": FunctionFragment;
    "yieldGenerated(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AaveContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AaveRewardContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__KittyPartyYieldGeneratorAave_init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createLockedValue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "kittyPartyYieldInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lockedPool", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowanceDeposit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowanceWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartyInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformDepositContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformRewardContractAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformWithdrawContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unwindLockedValue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldCurrent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldGenerated",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "AaveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AaveRewardContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__KittyPartyYieldGeneratorAave_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kittyPartyYieldInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockedPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowanceDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowanceWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformDepositContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformRewardContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformWithdrawContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwindLockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "yieldCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldGenerated",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardsClaimed(bool,uint256)": EventFragment;
    "YieldClaimed(uint256)": EventFragment;
    "YieldCreated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldCreated"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RewardsClaimedEvent = TypedEvent<
  [boolean, BigNumber],
  { rewardsClaimed: boolean; rewardTokenBalance: BigNumber }
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export type YieldClaimedEvent = TypedEvent<
  [BigNumber],
  { lpTokens: BigNumber }
>;

export type YieldClaimedEventFilter = TypedEventFilter<YieldClaimedEvent>;

export type YieldCreatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { lpTokens: BigNumber; sellTokens: BigNumber }
>;

export type YieldCreatedEventFilter = TypedEventFilter<YieldCreatedEvent>;

export interface KittyPartyYieldGeneratorAave extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KittyPartyYieldGeneratorAaveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AaveContract(overrides?: CallOverrides): Promise<[string]>;

    AaveRewardContract(overrides?: CallOverrides): Promise<[string]>;

    MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    __KittyPartyYieldGeneratorAave_init(
      treasuryContractParam: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLockedValue(
      arg0: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kittyPartyYieldInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        lockedAmount: BigNumber;
        yieldGeneratedInLastRound: BigNumber;
        sellTokenAddress: string;
        poolAddress: string;
        lpTokenAddress: string;
      }
    >;

    lockedAmount(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalLockedValue: BigNumber }>;

    lockedPool(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    setAllowanceDeposit(
      _kittyParty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowanceWithdraw(
      _kittyParty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPartyInfo(
      _sellTokenAddress: string,
      _lpTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformDepositContractAddress(
      _AaveContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformRewardContractAddress(
      _AaveRewardContract: string,
      _rewardTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformWithdrawContractAddress(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { treasuryContractAddress: string }>;

    unwindLockedValue(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yieldCurrent(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { yieldToBeGeneratedInCurrentRound: BigNumber }>;

    yieldGenerated(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  AaveContract(overrides?: CallOverrides): Promise<string>;

  AaveRewardContract(overrides?: CallOverrides): Promise<string>;

  MAX(overrides?: CallOverrides): Promise<BigNumber>;

  __KittyPartyYieldGeneratorAave_init(
    treasuryContractParam: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLockedValue(
    arg0: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kittyPartyYieldInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string] & {
      lockedAmount: BigNumber;
      yieldGeneratedInLastRound: BigNumber;
      sellTokenAddress: string;
      poolAddress: string;
      lpTokenAddress: string;
    }
  >;

  lockedAmount(
    kittyParty: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedPool(kittyParty: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardTokenAddress(overrides?: CallOverrides): Promise<string>;

  setAllowanceDeposit(
    _kittyParty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowanceWithdraw(
    _kittyParty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPartyInfo(
    _sellTokenAddress: string,
    _lpTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformDepositContractAddress(
    _AaveContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformRewardContractAddress(
    _AaveRewardContract: string,
    _rewardTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformWithdrawContractAddress(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  unwindLockedValue(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yieldCurrent(
    kittyParty: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yieldGenerated(
    kittyParty: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    AaveContract(overrides?: CallOverrides): Promise<string>;

    AaveRewardContract(overrides?: CallOverrides): Promise<string>;

    MAX(overrides?: CallOverrides): Promise<BigNumber>;

    __KittyPartyYieldGeneratorAave_init(
      treasuryContractParam: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createLockedValue(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kittyPartyYieldInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        lockedAmount: BigNumber;
        yieldGeneratedInLastRound: BigNumber;
        sellTokenAddress: string;
        poolAddress: string;
        lpTokenAddress: string;
      }
    >;

    lockedAmount(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedPool(kittyParty: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardTokenAddress(overrides?: CallOverrides): Promise<string>;

    setAllowanceDeposit(
      _kittyParty: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowanceWithdraw(
      _kittyParty: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartyInfo(
      _sellTokenAddress: string,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformDepositContractAddress(
      _AaveContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformRewardContractAddress(
      _AaveRewardContract: string,
      _rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformWithdrawContractAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    unwindLockedValue(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldCurrent(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldGenerated(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RewardsClaimed(bool,uint256)"(
      rewardsClaimed?: null,
      rewardTokenBalance?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      rewardsClaimed?: null,
      rewardTokenBalance?: null
    ): RewardsClaimedEventFilter;

    "YieldClaimed(uint256)"(lpTokens?: null): YieldClaimedEventFilter;
    YieldClaimed(lpTokens?: null): YieldClaimedEventFilter;

    "YieldCreated(uint256,uint256)"(
      lpTokens?: null,
      sellTokens?: null
    ): YieldCreatedEventFilter;
    YieldCreated(lpTokens?: null, sellTokens?: null): YieldCreatedEventFilter;
  };

  estimateGas: {
    AaveContract(overrides?: CallOverrides): Promise<BigNumber>;

    AaveRewardContract(overrides?: CallOverrides): Promise<BigNumber>;

    MAX(overrides?: CallOverrides): Promise<BigNumber>;

    __KittyPartyYieldGeneratorAave_init(
      treasuryContractParam: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLockedValue(
      arg0: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kittyPartyYieldInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedAmount(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedPool(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowanceDeposit(
      _kittyParty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowanceWithdraw(
      _kittyParty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPartyInfo(
      _sellTokenAddress: string,
      _lpTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformDepositContractAddress(
      _AaveContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformRewardContractAddress(
      _AaveRewardContract: string,
      _rewardTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformWithdrawContractAddress(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    unwindLockedValue(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yieldCurrent(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldGenerated(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AaveContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AaveRewardContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __KittyPartyYieldGeneratorAave_init(
      treasuryContractParam: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLockedValue(
      arg0: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kittyPartyYieldInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedAmount(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedPool(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAllowanceDeposit(
      _kittyParty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowanceWithdraw(
      _kittyParty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPartyInfo(
      _sellTokenAddress: string,
      _lpTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformDepositContractAddress(
      _AaveContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformRewardContractAddress(
      _AaveRewardContract: string,
      _rewardTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformWithdrawContractAddress(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unwindLockedValue(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yieldCurrent(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yieldGenerated(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
