/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type KittyInitiatorStruct = {
  kreatorFeesInBasisPoints: BigNumberish;
  daoFeesInBasisPoints: BigNumberish;
  winningStrategy: BigNumberish;
  timeToCollection: BigNumberish;
  maxKittens: BigNumberish;
  durationInDays: BigNumberish;
  amountInDAIPerRound: BigNumberish;
  partyName: BytesLike;
  daiAddress: string;
  yieldContract: string;
  winnerStrategy: string;
};

export type KittyInitiatorStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
  BigNumber,
  string,
  string,
  string,
  string
] & {
  kreatorFeesInBasisPoints: number;
  daoFeesInBasisPoints: number;
  winningStrategy: number;
  timeToCollection: number;
  maxKittens: number;
  durationInDays: number;
  amountInDAIPerRound: BigNumber;
  partyName: string;
  daiAddress: string;
  yieldContract: string;
  winnerStrategy: string;
};

export type KittyYieldArgsStruct = {
  sellTokenAddress: string;
  lpTokenAddress: string;
};

export type KittyYieldArgsStructOutput = [string, string] & {
  sellTokenAddress: string;
  lpTokenAddress: string;
};

export type KittyPartyFactoryArgsStruct = {
  tomCatContract: string;
  accountantContract: string;
  litterAddress: string;
  daoTreasuryContract: string;
  keeperContractAddress: string;
};

export type KittyPartyFactoryArgsStructOutput = [
  string,
  string,
  string,
  string,
  string
] & {
  tomCatContract: string;
  accountantContract: string;
  litterAddress: string;
  daoTreasuryContract: string;
  keeperContractAddress: string;
};

export interface KittyPartyControllerInterface extends utils.Interface {
  functions: {
    "addRoundDeposits()": FunctionFragment;
    "applyCompleteParty()": FunctionFragment;
    "applyInitialVerification()": FunctionFragment;
    "applyWinnerStrategy()": FunctionFragment;
    "callDataForUnwind()": FunctionFragment;
    "calldataForLock()": FunctionFragment;
    "changeState()": FunctionFragment;
    "currentRound()": FunctionFragment;
    "dai()": FunctionFragment;
    "depositAndAddKittenToParty(bytes32)": FunctionFragment;
    "durationInDays()": FunctionFragment;
    "getStage()": FunctionFragment;
    "initialize((uint8,uint8,uint8,uint8,uint16,uint16,uint256,bytes32,address,address,address),(address,address),(address,address,address,address,address),address,uint256)": FunctionFragment;
    "isTransitionRequired()": FunctionFragment;
    "issueRefund()": FunctionFragment;
    "kPFactory()": FunctionFragment;
    "kittyInitiator()": FunctionFragment;
    "kittyPartyControllerVars()": FunctionFragment;
    "lastStageTime()": FunctionFragment;
    "numberOfRounds()": FunctionFragment;
    "partyRoundKittens(uint256)": FunctionFragment;
    "payOrganizerFees()": FunctionFragment;
    "setActivityInterval(uint8)": FunctionFragment;
    "setCallDataForYield(bytes,bytes)": FunctionFragment;
    "setInviteHash(bytes32)": FunctionFragment;
    "stage()": FunctionFragment;
    "startNextRound()": FunctionFragment;
    "startStakingMultiRound()": FunctionFragment;
    "stopStaking()": FunctionFragment;
    "timeSinceChange()": FunctionFragment;
    "timeToCollection()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRoundDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyCompleteParty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyInitialVerification",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyWinnerStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callDataForUnwind",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calldataForLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositAndAddKittenToParty",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "durationInDays",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getStage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      KittyInitiatorStruct,
      KittyYieldArgsStruct,
      KittyPartyFactoryArgsStruct,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransitionRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueRefund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kPFactory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kittyInitiator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kittyPartyControllerVars",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastStageTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfRounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "partyRoundKittens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payOrganizerFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActivityInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallDataForYield",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInviteHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "stage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startNextRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startStakingMultiRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeSinceChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeToCollection",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addRoundDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyCompleteParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyInitialVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyWinnerStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callDataForUnwind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calldataForLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndAddKittenToParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "durationInDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTransitionRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kPFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kittyInitiator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kittyPartyControllerVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastStageTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partyRoundKittens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payOrganizerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActivityInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCallDataForYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInviteHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startNextRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startStakingMultiRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeSinceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeToCollection",
    data: BytesLike
  ): Result;

  events: {
    "Completed()": EventFragment;
    "KittenDeposited(uint256)": EventFragment;
    "KreatorStaked(uint256)": EventFragment;
    "PaidFees(address,uint256)": EventFragment;
    "PartyCompleted(address,uint256)": EventFragment;
    "RefundRequested(uint256)": EventFragment;
    "StageTransition(address,uint256,uint256)": EventFragment;
    "StopStaking(address,uint256)": EventFragment;
    "WinnersDecided(address,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Completed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KittenDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KreatorStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaidFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartyCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StageTransition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StopStaking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnersDecided"): EventFragment;
}

export type CompletedEvent = TypedEvent<[], {}>;

export type CompletedEventFilter = TypedEventFilter<CompletedEvent>;

export type KittenDepositedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type KittenDepositedEventFilter = TypedEventFilter<KittenDepositedEvent>;

export type KreatorStakedEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type KreatorStakedEventFilter = TypedEventFilter<KreatorStakedEvent>;

export type PaidFeesEvent = TypedEvent<
  [string, BigNumber],
  { party: string; fees: BigNumber }
>;

export type PaidFeesEventFilter = TypedEventFilter<PaidFeesEvent>;

export type PartyCompletedEvent = TypedEvent<
  [string, BigNumber],
  { party: string; internalState: BigNumber }
>;

export type PartyCompletedEventFilter = TypedEventFilter<PartyCompletedEvent>;

export type RefundRequestedEvent = TypedEvent<
  [BigNumber],
  { refund: BigNumber }
>;

export type RefundRequestedEventFilter = TypedEventFilter<RefundRequestedEvent>;

export type StageTransitionEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { party: string; prevStage: BigNumber; nextStage: BigNumber }
>;

export type StageTransitionEventFilter = TypedEventFilter<StageTransitionEvent>;

export type StopStakingEvent = TypedEvent<
  [string, BigNumber],
  { party: string; amount: BigNumber }
>;

export type StopStakingEventFilter = TypedEventFilter<StopStakingEvent>;

export type WinnersDecidedEvent = TypedEvent<
  [string, BigNumber[]],
  { party: string; winners: BigNumber[] }
>;

export type WinnersDecidedEventFilter = TypedEventFilter<WinnersDecidedEvent>;

export interface KittyPartyController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KittyPartyControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRoundDeposits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyCompleteParty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyInitialVerification(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyWinnerStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callDataForUnwind(overrides?: CallOverrides): Promise<[string]>;

    calldataForLock(overrides?: CallOverrides): Promise<[string]>;

    changeState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentRound(overrides?: CallOverrides): Promise<[number]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    depositAndAddKittenToParty(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    durationInDays(overrides?: CallOverrides): Promise<[number]>;

    getStage(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _kittyInitiator: KittyInitiatorStruct,
      _kittyYieldArgs: KittyYieldArgsStruct,
      _kPFactory: KittyPartyFactoryArgsStruct,
      _kreator: string,
      _kreatorStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTransitionRequired(overrides?: CallOverrides): Promise<[number]>;

    issueRefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kPFactory(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        tomCatContract: string;
        accountantContract: string;
        litterAddress: string;
        daoTreasuryContract: string;
        keeperContractAddress: string;
      }
    >;

    kittyInitiator(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        kreatorFeesInBasisPoints: number;
        daoFeesInBasisPoints: number;
        winningStrategy: number;
        timeToCollection: number;
        maxKittens: number;
        durationInDays: number;
        amountInDAIPerRound: BigNumber;
        partyName: string;
        daiAddress: string;
        yieldContract: string;
        winnerStrategy: string;
      }
    >;

    kittyPartyControllerVars(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, number, number] & {
        kreator: string;
        kreatorStake: BigNumber;
        profit: BigNumber;
        profitToSplit: BigNumber;
        yieldWithPrincipal: BigNumber;
        localKittens: number;
        internalState: number;
      }
    >;

    lastStageTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfRounds(overrides?: CallOverrides): Promise<[number]>;

    partyRoundKittens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    payOrganizerFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setActivityInterval(
      _timeToCollection: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCallDataForYield(
      _calldataForLock: BytesLike,
      _callDataForUnwind: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInviteHash(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stage(overrides?: CallOverrides): Promise<[number]>;

    startNextRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startStakingMultiRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeSinceChange(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeToCollection(overrides?: CallOverrides): Promise<[number]>;
  };

  addRoundDeposits(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyCompleteParty(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyInitialVerification(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyWinnerStrategy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callDataForUnwind(overrides?: CallOverrides): Promise<string>;

  calldataForLock(overrides?: CallOverrides): Promise<string>;

  changeState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentRound(overrides?: CallOverrides): Promise<number>;

  dai(overrides?: CallOverrides): Promise<string>;

  depositAndAddKittenToParty(
    _inviteHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  durationInDays(overrides?: CallOverrides): Promise<number>;

  getStage(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _kittyInitiator: KittyInitiatorStruct,
    _kittyYieldArgs: KittyYieldArgsStruct,
    _kPFactory: KittyPartyFactoryArgsStruct,
    _kreator: string,
    _kreatorStake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTransitionRequired(overrides?: CallOverrides): Promise<number>;

  issueRefund(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kPFactory(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      tomCatContract: string;
      accountantContract: string;
      litterAddress: string;
      daoTreasuryContract: string;
      keeperContractAddress: string;
    }
  >;

  kittyInitiator(
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      BigNumber,
      string,
      string,
      string,
      string
    ] & {
      kreatorFeesInBasisPoints: number;
      daoFeesInBasisPoints: number;
      winningStrategy: number;
      timeToCollection: number;
      maxKittens: number;
      durationInDays: number;
      amountInDAIPerRound: BigNumber;
      partyName: string;
      daiAddress: string;
      yieldContract: string;
      winnerStrategy: string;
    }
  >;

  kittyPartyControllerVars(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, number, number] & {
      kreator: string;
      kreatorStake: BigNumber;
      profit: BigNumber;
      profitToSplit: BigNumber;
      yieldWithPrincipal: BigNumber;
      localKittens: number;
      internalState: number;
    }
  >;

  lastStageTime(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfRounds(overrides?: CallOverrides): Promise<number>;

  partyRoundKittens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  payOrganizerFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setActivityInterval(
    _timeToCollection: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCallDataForYield(
    _calldataForLock: BytesLike,
    _callDataForUnwind: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInviteHash(
    _inviteHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stage(overrides?: CallOverrides): Promise<number>;

  startNextRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startStakingMultiRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopStaking(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeSinceChange(overrides?: CallOverrides): Promise<BigNumber>;

  timeToCollection(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    addRoundDeposits(overrides?: CallOverrides): Promise<boolean>;

    applyCompleteParty(overrides?: CallOverrides): Promise<void>;

    applyInitialVerification(overrides?: CallOverrides): Promise<void>;

    applyWinnerStrategy(overrides?: CallOverrides): Promise<void>;

    callDataForUnwind(overrides?: CallOverrides): Promise<string>;

    calldataForLock(overrides?: CallOverrides): Promise<string>;

    changeState(overrides?: CallOverrides): Promise<boolean>;

    currentRound(overrides?: CallOverrides): Promise<number>;

    dai(overrides?: CallOverrides): Promise<string>;

    depositAndAddKittenToParty(
      _inviteHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    durationInDays(overrides?: CallOverrides): Promise<number>;

    getStage(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _kittyInitiator: KittyInitiatorStruct,
      _kittyYieldArgs: KittyYieldArgsStruct,
      _kPFactory: KittyPartyFactoryArgsStruct,
      _kreator: string,
      _kreatorStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isTransitionRequired(overrides?: CallOverrides): Promise<number>;

    issueRefund(overrides?: CallOverrides): Promise<void>;

    kPFactory(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        tomCatContract: string;
        accountantContract: string;
        litterAddress: string;
        daoTreasuryContract: string;
        keeperContractAddress: string;
      }
    >;

    kittyInitiator(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        kreatorFeesInBasisPoints: number;
        daoFeesInBasisPoints: number;
        winningStrategy: number;
        timeToCollection: number;
        maxKittens: number;
        durationInDays: number;
        amountInDAIPerRound: BigNumber;
        partyName: string;
        daiAddress: string;
        yieldContract: string;
        winnerStrategy: string;
      }
    >;

    kittyPartyControllerVars(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, number, number] & {
        kreator: string;
        kreatorStake: BigNumber;
        profit: BigNumber;
        profitToSplit: BigNumber;
        yieldWithPrincipal: BigNumber;
        localKittens: number;
        internalState: number;
      }
    >;

    lastStageTime(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfRounds(overrides?: CallOverrides): Promise<number>;

    partyRoundKittens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payOrganizerFees(overrides?: CallOverrides): Promise<void>;

    setActivityInterval(
      _timeToCollection: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCallDataForYield(
      _calldataForLock: BytesLike,
      _callDataForUnwind: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setInviteHash(
      _inviteHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stage(overrides?: CallOverrides): Promise<number>;

    startNextRound(overrides?: CallOverrides): Promise<void>;

    startStakingMultiRound(overrides?: CallOverrides): Promise<void>;

    stopStaking(overrides?: CallOverrides): Promise<void>;

    timeSinceChange(overrides?: CallOverrides): Promise<BigNumber>;

    timeToCollection(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "Completed()"(): CompletedEventFilter;
    Completed(): CompletedEventFilter;

    "KittenDeposited(uint256)"(amount?: null): KittenDepositedEventFilter;
    KittenDeposited(amount?: null): KittenDepositedEventFilter;

    "KreatorStaked(uint256)"(amount?: null): KreatorStakedEventFilter;
    KreatorStaked(amount?: null): KreatorStakedEventFilter;

    "PaidFees(address,uint256)"(party?: null, fees?: null): PaidFeesEventFilter;
    PaidFees(party?: null, fees?: null): PaidFeesEventFilter;

    "PartyCompleted(address,uint256)"(
      party?: null,
      internalState?: null
    ): PartyCompletedEventFilter;
    PartyCompleted(
      party?: null,
      internalState?: null
    ): PartyCompletedEventFilter;

    "RefundRequested(uint256)"(refund?: null): RefundRequestedEventFilter;
    RefundRequested(refund?: null): RefundRequestedEventFilter;

    "StageTransition(address,uint256,uint256)"(
      party?: null,
      prevStage?: null,
      nextStage?: null
    ): StageTransitionEventFilter;
    StageTransition(
      party?: null,
      prevStage?: null,
      nextStage?: null
    ): StageTransitionEventFilter;

    "StopStaking(address,uint256)"(
      party?: null,
      amount?: null
    ): StopStakingEventFilter;
    StopStaking(party?: null, amount?: null): StopStakingEventFilter;

    "WinnersDecided(address,uint256[])"(
      party?: null,
      winners?: null
    ): WinnersDecidedEventFilter;
    WinnersDecided(party?: null, winners?: null): WinnersDecidedEventFilter;
  };

  estimateGas: {
    addRoundDeposits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyCompleteParty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyInitialVerification(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyWinnerStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callDataForUnwind(overrides?: CallOverrides): Promise<BigNumber>;

    calldataForLock(overrides?: CallOverrides): Promise<BigNumber>;

    changeState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndAddKittenToParty(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    durationInDays(overrides?: CallOverrides): Promise<BigNumber>;

    getStage(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _kittyInitiator: KittyInitiatorStruct,
      _kittyYieldArgs: KittyYieldArgsStruct,
      _kPFactory: KittyPartyFactoryArgsStruct,
      _kreator: string,
      _kreatorStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTransitionRequired(overrides?: CallOverrides): Promise<BigNumber>;

    issueRefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kPFactory(overrides?: CallOverrides): Promise<BigNumber>;

    kittyInitiator(overrides?: CallOverrides): Promise<BigNumber>;

    kittyPartyControllerVars(overrides?: CallOverrides): Promise<BigNumber>;

    lastStageTime(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfRounds(overrides?: CallOverrides): Promise<BigNumber>;

    partyRoundKittens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payOrganizerFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setActivityInterval(
      _timeToCollection: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCallDataForYield(
      _calldataForLock: BytesLike,
      _callDataForUnwind: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInviteHash(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stage(overrides?: CallOverrides): Promise<BigNumber>;

    startNextRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startStakingMultiRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeSinceChange(overrides?: CallOverrides): Promise<BigNumber>;

    timeToCollection(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addRoundDeposits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyCompleteParty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyInitialVerification(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyWinnerStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callDataForUnwind(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calldataForLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositAndAddKittenToParty(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    durationInDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _kittyInitiator: KittyInitiatorStruct,
      _kittyYieldArgs: KittyYieldArgsStruct,
      _kPFactory: KittyPartyFactoryArgsStruct,
      _kreator: string,
      _kreatorStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTransitionRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueRefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kPFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kittyInitiator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kittyPartyControllerVars(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastStageTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfRounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partyRoundKittens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payOrganizerFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setActivityInterval(
      _timeToCollection: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCallDataForYield(
      _calldataForLock: BytesLike,
      _callDataForUnwind: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInviteHash(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startNextRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startStakingMultiRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeSinceChange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeToCollection(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
